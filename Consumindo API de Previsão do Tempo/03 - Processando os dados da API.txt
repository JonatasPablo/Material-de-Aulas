Introdu√ß√£o

Nesta aula, vamos aprender como processar dados de uma API utilizando JavaScript puro e a API Fetch. Ser√£o abordados conceitos como:


Utiliza√ß√£o da API Fetch
Async/Await
Tratamento de erros
Consumo de m√∫ltiplas APIs numa mesma p√°gina
Integra√ß√£o de front-end com back-end

Preparando o Ambiente

Inicialmente, temos uma estrutura HTML simples com Bootstrap j√° configurado. Para come√ßar a utilizar a API, o professor decide criar um formul√°rio para capturar o CEP do usu√°rio.

<div class="container">
<div class="row">
<div class="col">
<label for="CEP">CEP</label>
<input type="text" id="CEP" class="form-control">
</div>
</div>

<div class="row mt-5">
<div class="col">
<label for="rua">Rua</label>
<input type="text" id="rua" class="form-control" readonly>
</div>
</div>
</div>

<button class="btn btn-success w-100">OK</button>


O formul√°rio conta com:


Campo para entrada do CEP
Campo somente leitura para exibir o nome da rua
Bot√£o OK para disparar a busca dos dados

O objetivo √© que, ao inserir um CEP v√°lido e clicar em OK, os demais campos sejam preenchidos automaticamente com os dados da API.

Buscando o CEP

Para buscar os dados do CEP, vamos utilizar uma API p√∫blica e gratuita chamada ViaCEP.

A primeira coisa a se fazer √© criar uma fun√ß√£o JavaScript que ser√° executada ao clicar no bot√£o OK:

function getAddressByCep() {

console.log(document.getElementById('CEP').value);

}


E associar essa fun√ß√£o ao evento de clique no bot√£o:

<button onclick="getAddressByCep()">OK</button>


Assim, ao digitar um CEP e clicar em OK, o valor ser√° exibido no console.

Consumindo a API

Agora precisamos fazer a integra√ß√£o com a API ViaCEP. Para isso, vamos utilizar a Fetch API nativa do JavaScript, seguindo a estrutura:

fetch(url)
.then(response => {
// tratar resposta
})
.catch(error => {
// tratar erro
});


Substituindo a URL pelo endere√ßo da API + o CEP buscado:

function getAddressByCep() {

const cep = document.getElementById('CEP').value;

fetch(`https://viacep.com.br/ws/${cep}/json/`)
.then(response => {
console.log(response);
})
.catch(error => {
console.log(error);
});

}


Podemos melhorar o tratamento de erros verificando o status da resposta:

.catch(error => {
if(!error.response.ok) {
alert('CEP inv√°lido!');
return;
}
});


E tamb√©m convertendo o retorno para JSON antes de utiliz√°-lo:

.then(async response => {
const data = await response.json();
console.log(data);
});


Exibindo os Dados

Com a API retornando os dados corretamente, podemos popul√°-los nos campos do formul√°rio:

document.getElementById('rua').value = data.logradouro;
document.getElementById('bairro').value = data.bairro;
document.getElementById('cidade').value = data.localidade;


Pronto! Agora estamos consumindo uma API externa e populando os campos automaticamente üòä

Lidando com Respostas Ass√≠ncronas

Um problema comum ao trabalhar com APIs √© lidar com respostas ass√≠ncronas.

Isso ocorre porque a chamada √† API √© feita em background e o c√≥digo continua executando sem esperar o retorno.

Uma solu√ß√£o √© utilizar async/await:

async function getAddressByCep() {

// c√≥digo anterior

const response = await fetch(url);
const data = await response.json();

// restante do c√≥digo

}


O await faz com que a execu√ß√£o espere a Promise ser resolvida antes de continuar. Dessa forma, garantimos que os dados ser√£o populados corretamente.

Tratando Erros com Try/Catch

Outra vantagem do async/await √© permitir o uso de try/catch para tratamento de erros:

async function getAddressByCep() {

try {

const response = await fetch(url);
const data = await response.json();

// c√≥digo

} catch (error) {

alert(error.message);

}

}


Assim fica muito mais simples lidar com erros da API.

Consumindo M√∫ltiplas APIs

Agora que dominamos o consumo de API com JavaScript, podemos integrar quantas quisermos na mesma p√°gina!

Basta criar uma fun√ß√£o para cada API e trat√°-las de forma independente.

Por exemplo, al√©m da API de CEP, podemos consumir uma API de previs√£o do tempo:

async function getWeatherForecast() {

const lat = document.getElementById('lat').value;
const long = document.getElementById('long').value;

try {

const response = await fetch(`https://api.weather.com/v3/wx/forecast/hourly/${lat};${long}?apiKey=${API_KEY}&units=m`);
const data = await response.json();

let forecastHTML = '';

data.hourly.temperature.forEach(temp => {
forecastHTML += `
<div>
${temp.time} - ${temp.value} ¬∞C
</div>
`;
});

document.getElementById('forecast').innerHTML = forecastHTML;

} catch (error) {

alert(error.message);

}

}


E atrelar essa fun√ß√£o a outro bot√£o de busca na mesma p√°gina. Dessa forma, podemos integrar e combinar dados de v√°rias fontes com nosso front-end!

Considera√ß√µes Finais

Nesta aula, vimos:


Como utilizar a Fetch API nativa do JavaScript
Tratamento de erros e respostas ass√≠ncronas
Integra√ß√£o do front-end com APIs externas
Popula√ß√£o de formul√°rios com dados din√¢micos
Consumo de m√∫ltiplas APIs na mesma p√°gina

Isso permite que criemos p√°ginas ricas, com dados sempre atualizados, de forma f√°cil e com JavaScript puro!

Espero que este material seja √∫til como base para consumir APIs em projetos mais avan√ßados.

At√© a pr√≥xima!