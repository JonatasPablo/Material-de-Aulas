                                        Promises em JavaScript
O que são Promises?
Representam uma operação assíncrona futura
Podem ter 3 estados: pending, fulfilled, rejected
Sintaxe básica:
Criar uma nova Promise: new Promise((resolve, reject) => { ... })
Resolver uma Promise: resolve(value)
Rejeitar uma Promise: reject(error)
Analogia com o mundo real
Pedir um favor a um amigo
Você precisa de algo, mas não pode parar o que está fazendo
Seu amigo vai buscar o que você precisa
Você continua com suas atividades enquanto espera
Quando seu amigo voltar, você recebe o que pediu
Exemplo prático
Precisar de um caderno novo
Pedir para um amigo ir comprar
Criar uma Promise para simular a operação assíncrona
new Promise((resolve, reject) => { ... })
Usar setTimeout para simular a operação
Resolver a Promise se a compra for bem-sucedida
Rejeitar a Promise se houver algum erro
Usar then e catch para tratar os resultados da Promise
Exercício prático
Criar uma Promise que simule a busca de dados em um endpoint
A Promise deve resolver com um objeto qualquer
Aplicar os conceitos de Promises aprendidos
Conclusão
Promises são usadas para lidar com operações assíncronas em JavaScript
Permitem que o código continue sendo executado enquanto espera pelo resultado de uma operação
Possuem 3 estados: pending, fulfilled, rejected
Exercícios práticos ajudam a consolidar o aprendizado


                                        Usando Promises para buscar dados de um servidor
Introdução
Exercício sobre um novo conceito
Resolver o exercício juntos
Buscando dados em um servidor
Buscar informações de um usuário
Criar uma nova Promise
Função com resolve e reject
Simulando a busca no servidor
Usar setTimeout para simular a busca
Caso de sucesso: resolver a Promise com os dados
Caso de erro: rejeitar a Promise com a mensagem de erro
Executando a Promise de busca
Usar then para lidar com o sucesso
Usar catch para lidar com o erro
Imprimir as mensagens de sucesso e erro
Simplificando o código
Usar console.log diretamente sem then e catch
Forma mais fácil de lidar com Promises
Conclusão
Entendimento do exercício de busca no servidor
Revisitar o exercício e refazer se necessário
Continuar estudando e praticando


                                        Encadeamento de Promises
O que são Promises?
Promises são uma forma de lidar com operações assíncronas em JavaScript
Podem estar em três estados: pendente, resolvida ou rejeitada
Quando uma Promise é resolvida, ela retorna um valor; quando é rejeitada, retorna um erro
Encadeamento de Promises
Acontece quando precisamos executar uma segunda ação baseada no resultado da primeira Promise
Exemplo: pedir a um amigo para comprar um caderno, e só então começar um curso
Outro exemplo: autenticação no Instagram, seguido da busca de fotos recentes dos seguidores
Exemplo prático
Autenticação no Instagram
Nova Promise para autenticação do usuário
Resolve com sucesso: retorna username e lista de quem o usuário segue
Reject em caso de erro na autenticação
Busca de fotos recentes dos seguidores
Nova Promise para buscar as fotos
Resolve com sucesso: retorna as fotos
Reject em caso de erro na busca
Encadeamento das Promises
Após a autenticação, chama a Promise de busca de fotos
Recebe a resposta da busca e imprime no console
Exercício proposto
Simular um processo de encomenda em uma loja online
Primeiro passo: fazer o pedido
Segundo passo: aguardar o processamento do pagamento
Terceiro passo: exibir a mensagem de sucesso (pedido pago, aguardando envio)
O encadeamento de Promises é um conceito fundamental na programação assíncrona em JavaScript, permitindo que ações dependentes sejam executadas de forma organizada e legível.


                                    Criando um Sistema de Pedidos e Encomendas Online
Introdução
Exercício semelhante à autenticação de usuário do Instagram
Resolveremos o exercício juntos para deixá-lo mais claro
Entendendo o Problema
Criar uma promessa de pedido confirmado
Simular o processamento do pedido com setTimeout
Resolver a promessa com sucesso ou rejeitar em caso de falha
Criando a Promessa de Pagamento
Criar uma nova promessa para o pagamento
Receber o pedido como parâmetro
Simular a aprovação do pagamento com setTimeout
Resolver a promessa com sucesso ou rejeitar em caso de falha
Executando as Promessas
Executar a promessa de pedido confirmado
Retornar a promessa de pagamento
Encadear as promessas com .then()
Exibir logs para acompanhar o processo
Sincronicidade do Código
Entender o comportamento do console.log() em relação às promessas
Posicionar corretamente o log para que seja exibido após a aprovação do pagamento
Conclusão
O exercício foi resolvido com sucesso
Importante entender o conceito de sincronicidade do código


