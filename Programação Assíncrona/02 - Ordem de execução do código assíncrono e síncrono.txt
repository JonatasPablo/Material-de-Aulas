Para mostrar de forma bem didática a ordem de execução do código síncrono e assíncrono, vamos começar com um exemplo simples para cada um e visualizar a ordem dos eventos.

                                        ### 1. **Código Síncrono**

Imagine que você tem o seguinte código:

```javascript
console.log('Início');

function tarefaDemorada() {
  for (let i = 0; i < 1e9; i++) {} // Loop que simula uma tarefa demorada
}

tarefaDemorada();

console.log('Fim');
```

**Ordem de execução:**

1. **`console.log('Início');`**  
   - Imprime "Início".

2. **`tarefaDemorada();`**  
   - O loop `for` começa e bloqueia a execução do restante do código até que o loop seja concluído.

3. **`console.log('Fim');`**  
   - Após a conclusão do loop, "Fim" é impresso.

**Saída do Console:**  
```
Início
Fim
```
A execução é totalmente linear e bloqueante: o código espera a tarefa demorada terminar antes de prosseguir.


                                        ### 2. **Código Assíncrono**

Agora, vejamos um exemplo assíncrono:

```javascript
console.log('Início');

setTimeout(() => {
  console.log('Tarefa Assíncrona');
}, 2000);

console.log('Fim');
```

**Ordem de execução:**

1. **`console.log('Início');`**  
   - Imprime "Início".

2. **`setTimeout(..., 2000);`**  
   - `setTimeout` é chamado para esperar 2 segundos antes de executar a função. Entretanto, a execução do código não é bloqueada. A função é colocada em uma fila para ser executada após 2 segundos.

3. **`console.log('Fim');`**  
   - Imprime "Fim" imediatamente após definir o `setTimeout`.

4. **Depois de 2 segundos:**  
   - A função dentro do `setTimeout` é executada, imprimindo "Tarefa Assíncrona".

**Saída do Console:**  
```
Início
Fim
Tarefa Assíncrona
```

Aqui, o código continua a ser executado enquanto o temporizador de 2 segundos passa em segundo plano, e a mensagem "Tarefa Assíncrona" só aparece depois de "Fim".

### Resumo Visual da Ordem de Execução:

- **Síncrono:**
  ```
  Início -> Tarefa Demorada -> Fim
  ```
  O código segue um fluxo linear, esperando cada tarefa terminar antes de passar para a próxima.

- **Assíncrono:**
  ```
  Início -> Fim -> (Esperando...) -> Tarefa Assíncrona
  ```
  O código não espera a tarefa assíncrona (como `setTimeout`) terminar, passando para a próxima instrução e voltando à tarefa assíncrona depois que ela estiver pronta.

Esses exemplos devem ajudar a visualizar claramente como a ordem de execução funciona em código síncrono versus assíncrono.