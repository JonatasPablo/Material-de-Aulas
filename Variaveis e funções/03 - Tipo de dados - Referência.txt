Introdução

Neste ebook, exploraremos dois tipos de dados fundamentais em JavaScript: objetos e funções. Esses tipos de dados de referência são essenciais para o desenvolvimento de aplicações robustas e eficientes. Vamos mergulhar em suas definições, características e usos práticos, incluindo exemplos e analogias para facilitar a compreensão.

Objetos em JavaScript

O que são Objetos?

Objetos em JavaScript são coleções de propriedades, onde cada propriedade é uma associação entre um nome e um valor. Podemos pensar em um objeto como uma mochila cheia de itens, onde cada item tem um nome e um valor específico.

Um objeto é como uma mochila que contém diversos itens, cada um com sua própria identidade e características.


Estrutura de um Objeto

Vamos visualizar a estrutura de um objeto usando o exemplo da mochila:

let mochila = {
batom: "vermelho",
casaco: "verde",
documento: "CNH"
};


Neste exemplo:


batom, casaco e documento são as propriedades (ou chaves) do objeto
"vermelho", "verde" e "CNH" são os valores associados a essas propriedades

Acessando Propriedades de Objetos

Existem duas maneiras principais de acessar as propriedades de um objeto:


Notação de ponto:

console.log(mochila.documento); // Saída: "CNH"



Notação de colchetes:

console.log(mochila["documento"]); // Saída: "CNH"


Modificando e Deletando Propriedades


Modificar uma propriedade:

mochila.batom = "rosa";



Deletar uma propriedade:

delete mochila.casaco;


Após essa operação, o objeto mochila não terá mais a propriedade casaco.

Funções em JavaScript

O que são Funções?

Funções são blocos de código projetados para executar uma tarefa específica. Podemos pensar em funções como máquinas que recebem uma entrada, processam essa entrada e produzem uma saída.

Uma função é como uma máquina de suco: recebe frutas (entrada), processa-as e produz suco (saída).


Estrutura Básica de uma Função

Vamos ver a estrutura básica de uma função usando o exemplo da máquina de suco:

function sucoLaranja(laranja) {
// Processamento da laranja
return "Suco de laranja pronto!";
}


Neste exemplo:


function é a palavra-chave para declarar uma função
sucoLaranja é o nome da função
laranja é o parâmetro que a função recebe
O bloco de código entre chaves {} é onde ocorre o processamento
return especifica o que a função deve retornar

Chamando uma Função

Para executar uma função, basta chamar seu nome seguido de parênteses:

let resultado = sucoLaranja("Laranja pêra");
console.log(resultado); // Saída: "Suco de laranja pronto!"


Reutilização de Funções

Uma das grandes vantagens das funções é a possibilidade de reutilização. Você pode chamar a mesma função várias vezes com diferentes argumentos:

let suco1 = sucoLaranja("Laranja lima");
let suco2 = sucoLaranja("Laranja bahia");


Aplicação Prática: Calculadora de IMC

Vamos aplicar os conceitos de objetos e funções em um exemplo prático: uma calculadora de Índice de Massa Corporal (IMC).

Função para Cálculo do IMC

function calculateIMC(pessoa) {
const IMC = pessoa.peso / (pessoa.altura * pessoa.altura);
const resultado = `O IMC de ${pessoa.nome} é ${IMC.toFixed(2)}`;
const saudavel = IMC < 25 && IMC > 18.5;

return {
nome: pessoa.nome,
imc: IMC,
resultado: resultado,
saudavel: saudavel
};
}


Utilizando a Função

const pessoa1 = {
nome: "João",
peso: 70,
altura: 1.75
};

const pessoa2 = {
nome: "Larissa",
peso: 60,
altura: 1.60
};

console.log(calculateIMC(pessoa1));
console.log(calculateIMC(pessoa2));


Esta função calculateIMC demonstra como podemos usar objetos como parâmetros e retornar objetos como resultado, combinando efetivamente os conceitos de objetos e funções.

Conclusão

Neste ebook, exploramos os tipos de dados de referência em JavaScript, focando em objetos e funções. Aprendemos que:


Objetos são coleções de propriedades que nos permitem agrupar dados relacionados.
Funções são blocos de código reutilizáveis que executam tarefas específicas.

A compreensão desses conceitos é fundamental para o desenvolvimento em JavaScript, permitindo a criação de código mais organizado, eficiente e reutilizável. Pratique esses conceitos regularmente para aprimorar suas habilidades de programação.


Lembre-se: a prática é essencial para solidificar esses conhecimentos. Experimente criar seus próprios objetos e funções, e não hesite em buscar mais informações ou tirar dúvidas quando necessário. Bons estudos e boa programação!