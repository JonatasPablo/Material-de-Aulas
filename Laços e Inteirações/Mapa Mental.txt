                                        Laços e Iterações
Introdução
Iterações são muito comuns no dia a dia do desenvolvedor
Necessidade de executar o mesmo trecho de código várias vezes para cada item de uma lista
Métodos de Iteração
For
Usado quando se sabe exatamente o número de repetições necessárias
Executa o mesmo trecho de código várias vezes
While
Usado quando não se sabe exatamente o número de repetições necessárias
Executa o código até que uma condição seja verdadeira
Do While
Muito similar ao While
Diferença: Executa o código uma vez antes de verificar a condição
For In
Usado para percorrer as propriedades de um objeto
Será abordado com mais detalhes nas próximas aulas
For Of
Usado para percorrer objetos iteráveis, como arrays e strings
Também será abordado com mais detalhes nas próximas aulas
Conclusão
Laços são estruturas fundamentais que permitem repetir ações no código
Economizam muito tempo e esforço
Serão abordados com mais detalhes nos próximos capítulos


                                        Estrutura de Controle FOR em JavaScript
Introdução
O FOR é uma estrutura de controle muito útil para desenvolvedores
Permite repetir um bloco de código um número específico de vezes
Automatiza tarefas repetitivas no código
Sintaxe do FOR
Declaração e inicialização da variável
Condição de execução
Incremento da variável
Bloco de código a ser repetido
Entendendo cada parte do FOR
Declaração Inicial
Inicialização da variável de controle (geralmente com 0)
Condição
Define quantas vezes o código será executado
Deve ser uma expressão booleana
Incremento
Responsável por fazer a variável de controle chegar à condição de parada
Geralmente incrementa a variável em 1
Bloco de Código
Código que será repetido N vezes
Exemplos de Uso
Exibir Números de 0 a 10
Inicialização da variável i com 0
Condição: i <= 10
Incremento: i++
Exibir o valor de i no console
Exibir Apenas Números Pares
Utilizar o operador módulo (%) para verificar se o número é par
Condição: i % 2 === 0
Exibir o valor de i no console
Erros Comuns
Esquecimento de Incrementar a Variável
Pode causar um loop infinito, consumindo muita memória
Condição Incorreta
Pode fazer com que o loop nunca seja executado
Deve-se verificar se a condição está correta
Exercício de Fixação: Tabuada
Estrutura de loop aninhado
Loop externo para iterar de 1 a 10 (números da tabuada)
Loop interno para iterar de 0 a 10 (multiplicadores)
Utilização de template strings para exibir a tabuada formatada
Conclusão
O FOR é uma estrutura de controle essencial em JavaScript
Permite automatizar tarefas repetitivas de forma eficiente
Requer atenção aos detalhes, como inicialização, condição e incremento, para evitar erros
Exercícios práticos ajudam a consolidar o entendimento do conceito


                                        Laço While em JavaScript
O que é o laço While?
Estrutura de controle que permite repetir um bloco de código enquanto uma condição for verdadeira
Diferença do laço For: não se sabe exatamente quantas vezes o código será executado
Sintaxe do laço While
Palavra reservada while
Condição a ser satisfeita
Bloco de código a ser executado
Exemplo Prático
Declarar variável numero inicializada em 1
Condição: numero <= 5
Imprimir valor de numero
Incrementar numero
Executa até a condição não ser mais verdadeira
Exercício Prático
Computador escolhe um número aleatório de 1 a 10
Usuário deve adivinhar o número escolhido
Usar laço while para repetir até o usuário acertar
Variável isCorrect para controlar o loop
Usar prompt para obter o palpite do usuário
Comparar o palpite com o número escolhido
Converter o palpite para número antes de comparar
Conclusão
Laço while é útil quando não se sabe exatamente quantas vezes o código precisa ser executado
Executa até que a condição seja falsa
Exemplo prático de adivinhar o número escolhido pelo computador


                                        Diferenças entre While e Do-While em Programação
Introdução
Entendendo o funcionamento do while
Diferença entre for e while
Necessidade de aprender sobre o do-while
Do-While
Definição: Executa o bloco de código pelo menos uma vez, antes de verificar a condição
Sintaxe:
do { código } while (condição);
Primeiro executa o código, depois verifica a condição
Exemplo:
Imprimir números de 1 a 5
Variável número inicializada em 0
Incremento da variável dentro do bloco
Condição número < 5
Executa o bloco pelo menos uma vez
Comparação entre While e Do-While
No while, a condição é verificada antes da execução do bloco
No do-while, o bloco é executado pelo menos uma vez, independente da condição
Exemplo: Adivinhar um número escolhido pelo computador
while: Entra no laço apenas se a condição for verdadeira
do-while: Executa o bloco de código uma vez antes de verificar a condição
Principais Erros
Esquecer de atualizar a condição
Pode causar um loop infinito
Esquecer de incrementar/decrementar a variável da condição
Também pode causar um loop infinito
Importância de verificar a condição corretamente
Evita problemas de memória e desempenho
Conclusão
while e do-while são usados para executar um bloco de código repetidamente
Diferença principal: do-while executa o bloco pelo menos uma vez
Cuidado com erros comuns, como esquecer de atualizar a condição
Sempre verifique a condição para evitar problemas


                                        Laços de Iteração em JavaScript: Entendendo o FOR...IN
Introdução
Tipos de laços de iteração: FOR, WHILE, DO WHILE
Importância do FOR...IN para iterar sobre propriedades de objetos
Sintaxe do FOR...IN
Estrutura básica: for (key in object) { ... }
Iteração sobre as propriedades de um objeto
Exemplo Prático
Criação do objeto PESSOA com diversas propriedades
Iteração sobre as propriedades usando for...in
Acesso aos valores das propriedades usando pessoa[key]
Utilidades do FOR...IN
Iterar sobre objetos com propriedades desconhecidas
Descobrir propriedades de objetos, inclusive herdadas
Útil em integrações com sistemas externos
Herança de Propriedades
Objeto padrão Object possui propriedades herdadas
Exemplo de herança de propriedade Surname
Exercício Prático: Lista de Tarefas
Criação do objeto tasks com propriedades diversas
Iteração sobre as propriedades usando for...in
Verificação do status de cada tarefa (concluída ou incompleta)
Cuidados e Limitações
Não é recomendado usar for...in para iterar sobre arrays
Existem outras estruturas mais adequadas para arrays, como for...of, forEach, map, filter
Conclusão
O for...in é uma ferramenta poderosa para iterar sobre propriedades de objetos
Útil em situações em que não se conhece previamente as propriedades do objeto
Deve-se tomar cuidado ao usá-lo com arrays, pois não é sua principal finalidade


                                        Laços e Iterações em JavaScript
Introdução
Estamos finalizando o bloco de laços e iterações
Na aula anterior, falamos sobre o laço for...in
Agora vamos falar sobre o laço for...of
Laço for...of
Usado para iterar sobre arrays, listas, strings e objetos iteráveis
Sintaxe:
for (item of lista) { ... }
Declara uma variável item que recebe cada elemento da lista durante a iteração
Executa o código dentro do bloco { ... } para cada elemento da lista
Exemplos:
Iterando sobre uma lista de produtos
Calcular o valor total da lista
Usando total += item.price para somar os preços
Iterando sobre uma string
Pega cada caractere da string
Diferenças entre for...of e for...in
for...of é específico para iterar sobre estruturas iteráveis (arrays, listas, strings)
for...in é usado para iterar sobre propriedades enumeráveis de objetos
Tentar usar for...of com um objeto gera um erro, pois objetos não são iteráveis
Conclusão
for...of é muito útil para iterar sobre listas e estruturas iteráveis
Existem outras formas de iterar sobre listas, que serão abordadas no próximo capítulo
É importante conhecer o for...of pois pode ser necessário usá-lo em determinadas situações


                                        Resumo do Conteúdo sobre Laços e Iterações
Introdução
Revisão dos principais tipos de laços em programação
Laço for
Usado quando se sabe o número exato de iterações
Útil para iterar sobre listas com tamanho conhecido (list.length)
Exemplo: Iterar sobre uma lista de frutas e exibir o nome de cada uma
Laço while
Usado quando não se sabe o número exato de iterações
Executa o código até que a condição seja falsa
Pode não executar o código se a condição for falsa logo de início
Laço do while
Semelhante ao while, mas garante que o código será executado pelo menos uma vez
Útil quando se precisa garantir que o código será executado pelo menos uma vez
Laço for in
Usado para iterar sobre propriedades enumeráveis de um objeto
Útil quando não se conhece a estrutura do objeto
Também pode ser usado para iterar sobre herança de objetos
Laço for of
Usado para iterar sobre elementos iteráveis, como arrays
Permite acessar diretamente os valores dos elementos, sem precisar usar índices
Exercício Proposto
Dado um array de frutas, iterar sobre ele usando os diferentes tipos de laços:
for
while
for of
Objetivo: Fixar o conhecimento sobre iteração de listas
Conclusão
Bloco de laços e iterações é fundamental para o próximo tópico: manipulação de arrays e funções
Continuar praticando e fixando o conhecimento para dominar a linguagem


